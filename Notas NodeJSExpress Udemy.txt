
	2. Instalado nodejs y visual studio code

		https://nodejs.org/es/download/
			https://nodejs.org/dist/v12.16.1/node-v12.16.1-x64.msi

		Actualizar NodeJS, cambiar versión de node con NPM
			http://blog.josmantek.com/nodejs/actualizar-nodejs-cambiar-version-node-npm/

		Consultar versión de Node:
			node -v

		Consultar versión de NPM:
			npm -v

		Conocer detalles sobre Node instalado:
			- Ejecutar la consola de Node
				(Buscar en programas instalados el acceso: Node.js)

			- Desde la consola ejecutar:
				process

			- Detalles principales:
				title: 'Node.js',
				version: 'v10.15.0',
				execPath: 'E:\\nodejs\\node.exe',

		VSCode:
			https://aka.ms/win32-x64-user-stable

		Extensiones:
			Terminal
			Prettier - Code formatter
			Git lens
			Git history
			VSCode-icons

	3. Ejecutando una app simple con nodejs

	4. Core Modules
		Funcionalidades simples o complejas que pueden ser reutilizados en una aplicación nodejs.
		Cada módulo tiene su propio contexto, por esto un módulo no puede interferir con otro.
		Cada módulo se coloca en un archivo .js diferente en una carpeta separada.

		Tipos de módulos:
			- Core
				Módulos que vienen por defecto cuando instalamos Node JS
				Ej:
					http	Permite ejecutar js del lado del servidor

			- Local

			- Third Party

	5. Local Modules

		Tipos de módulos:
			- Core
				Módulos que vienen por defecto cuando instalamos Node JS
				Ej:
					fs		Permite trabajar con archivos

			- Local
				Son los módulos que escribimos en nuestra aplicación

			- Third Party

	6. Importaciones parciales

		Cuando desde un módulo mío hago algo como:

			module.exports = { funcion1, funcion2 }

			Esto se conoce como una EXPORTACIÓN GLOBAL

		Para realizar exportaciones parciales, se debe exportar cada función
			de la siguiente manera:

				module.exports.inf = function info (param) {

		Para realicar importaciones parciales, se debe importar cada función
			de la siguiente manera:

				var { funcion1, funcion2 } = require('./modules/my-log')

		Otra manera de hacer una exportación parcial es escribir lo siguiente
			solo al final del archivo que tiene las funciones que deseo exportar:

				module.exports.info = info	// aquí exporto la función "info" (que debe
				haber sido declarada más arriba en mi arhcivo), con el nombre "info" (el
				cual debe ser el utilizado cuando se haga el require).
				* No es obligatorio que el nombre con el que se exporta sea igual al nombre
					de la función.

	7. Instalando un módulo desde NPM

		Tipos de módulos:

			- Third Party
				Son módulos desarrollados por otras personas

		Repositorio con módulos publicos disponibles para instalar con NPM:

			https://www.npmjs.com/

		Instalación de un módulo con npm:

			1º - Para poder instalar un módulo (paquete) con npm, primero debemos inicializar
				la carpeta donde estamos trabajando (lo que hará que pase a ser un paquete)
				Esto se hace ejecutando:
					npm init
				Se ingresan los datos solicitados por el asistente para establecer los detalles
				del paquete que se está creando.
				Esto genera un archivo llamado:
					package.json

			2º - Se instala el paquete deseado utilizando el comando siguiente:

				npm install nombreDelPaquete

				Ej:
					npm i countries-list
					* Es válido utilizar solo la letra "i", en lugar de "install"

				Esto agrega en el archivo package.json una nueva sección llamada
					"dependencies"
					la cual incluye el nombre del paquete externo del cual depende nuestro paquete.

				Junto con el nombre de la nueva dependencia, aparece la versión actual de la msima
				y a su vez éste número incluye delante el simbolo ^:
					"^2.5.1"
				Este simbolo le dice a NPM que cuando nuestro paquete sea instalado, se descargue
				e instale la dependencia indicada en su versión más actualizada (siempre y cuando
				la misma comienza con el 2). Pero esto puede traer un problema, que es que si al momento
				de instalarse alguien nuestro paquete, el desarrollador de la dependencia lanzó una
				nueva versión que mantiene como primer número el 2, pero que incluye cambios que rompen
				compatibilidad con versiones anteriores, lo que va a pasar es que nuestro paquete no va
				a funcionar.
				Para evitar esto es que entre NODE y NPM se acordó la creación de un nuevo archivo llamado
				"package-lock.json", el cual indica que versión expecífica de cada dependencia se debe
				instalar cuando se instale nuestro paquete, más allá de que en el package.json las mismas
				tengan delante de su número de versión el simbolo ^.

				También crea la carpeta "node_modules"
					Donde se descargarán los archivos de las dependencias instaladas.

		Creación de un script NPM

			En el archivo package.json, en la sección "Scripts", se agrega una nueva entrada
			con nombre "start" y luego de dos puntos se agrega su definición, ej:
				"start": "node index.js"

			Para ejecutar este script debo ejecutar:
				npm start 			//	o npm run start

		Uso del módulo core:	url
			El módulo url posee un método llamado parse() que recibe la propiedad url del objeto request:
				var parsed = url.parse(request.url)
			y devuelve un objeto llamado Url con toda la información de la url recibida:
				Url {
					protocol: null,
					slashes: null,
					auth: null,
					host: null,
					port: null,
					hostname: null,
					hash: null,
					search: '?code=AR',
					query: 'code=AR',
					pathname: '/country',
					path: '/country?code=AR',
					href: '/country?code=AR'
				}

		Uso del módulo core:	querystring
			El módulo querystring posee un método llamado parse que recibe una cadena con el formato "clave=valor&clave2=valor2":
				var query = querystring.parse('code=AR')
			y devuelve un objeto que posee propiedades con los nombres de las claves y como valores de las mismas los valores
			luego de los signos de igual:
				Query: {
					code: 'AR'
				}

	8. Respaldar una app nodejs en un repositorio Git
		-	Inicializar un repositorio Git en la carpeta de nuestro proyecto ejecutando:
				git init
		-	Crear un nuevo repo en Github
		-	Copiarse la url del repo, por ej:
				https://github.com/Jonatandb/CursoUdemyIntroNodeJSExpress.git
		-	Crear en el raiz del proyecto un archivo llamado ".gitignore"
				Este archivo va a tener una entrada por cada carpeta y/o archivo que deseamos
					que Git no tenga en cuenta, para que no lo versione.
				Agregar por ejemplo:
					node_modules/
				** No agregar nunca el archivo package-lock.json!
		-	Desde la consola, parados en el raíz del proyecto, ejecutar:
				git remote add origin https://github.com/Jonatandb/CursoUdemyIntroNodeJSExpress.git
				Con esto vinculamos el repositorio local con el remoto en Github
		-	Crear rama local:
				git checkout -b nombreDeLaRama		(por ej: intro o develop, etc)
		-	Agregar el código y commitearlo:
				git add .
				git commit -m "Commit inicial"
		-	Subir el código a Github:
				git push origin nombreDeLaRama




