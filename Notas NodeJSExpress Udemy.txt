	Repositorio:
				https://github.com/Jonatandb/CursoUdemyIntroNodeJSExpress

	2. Instalado nodejs y visual studio code

		https://nodejs.org/es/download/
			https://nodejs.org/dist/v12.16.1/node-v12.16.1-x64.msi

		Actualizar NodeJS, cambiar versión de node con NPM
			http://blog.josmantek.com/nodejs/actualizar-nodejs-cambiar-version-node-npm/

		Consultar versión de Node:
			node -v

		Consultar versión de NPM:
			npm -v

		Conocer detalles sobre Node instalado:
			- Ejecutar la consola de Node
				(Buscar en programas instalados el acceso: Node.js)

			- Desde la consola ejecutar:
				process

			- Detalles principales:
				title: 'Node.js',
				version: 'v10.15.0',
				execPath: 'E:\\nodejs\\node.exe',

		VSCode:
			https://aka.ms/win32-x64-user-stable

		Extensiones:
			Terminal
			Prettier - Code formatter
			Git lens
			Git history
			VSCode-icons

	3. Ejecutando una app simple con nodejs

	4. Core Modules
		Funcionalidades simples o complejas que pueden ser reutilizados en una aplicación nodejs.
		Cada módulo tiene su propio contexto, por esto un módulo no puede interferir con otro.
		Cada módulo se coloca en un archivo .js diferente en una carpeta separada.

		Tipos de módulos:
			- Core
				Módulos que vienen por defecto cuando instalamos Node JS
				Ej:
					http	Permite ejecutar js del lado del servidor

			- Local

			- Third Party

	5. Local Modules

		Tipos de módulos:
			- Core
				Módulos que vienen por defecto cuando instalamos Node JS
				Ej:
					fs		Permite trabajar con archivos

			- Local
				Son los módulos que escribimos en nuestra aplicación

			- Third Party

	6. Importaciones parciales

		Cuando desde un módulo mío hago algo como:

			module.exports = { funcion1, funcion2 }

			Esto se conoce como una EXPORTACIÓN GLOBAL

		Para realizar exportaciones parciales, se debe exportar cada función
			de la siguiente manera:

				module.exports.inf = function info (param) {

		Para realicar importaciones parciales, se debe importar cada función
			de la siguiente manera:

				var { funcion1, funcion2 } = require('./modules/my-log')

		Otra manera de hacer una exportación parcial es escribir lo siguiente
			solo al final del archivo que tiene las funciones que deseo exportar:

				module.exports.info = info	// aquí exporto la función "info" (que debe
				haber sido declarada más arriba en mi arhcivo), con el nombre "info" (el
				cual debe ser el utilizado cuando se haga el require).
				* No es obligatorio que el nombre con el que se exporta sea igual al nombre
					de la función.

	7. Instalando un módulo desde NPM

		Tipos de módulos:

			- Third Party
				Son módulos desarrollados por otras personas

		Repositorio con módulos publicos disponibles para instalar con NPM:

			https://www.npmjs.com/

		Instalación de un módulo con npm:

			1º - Para poder instalar un módulo (paquete) con npm, primero debemos inicializar
				la carpeta donde estamos trabajando (lo que hará que pase a ser un paquete)
				Esto se hace ejecutando:
					npm init
				Se ingresan los datos solicitados por el asistente para establecer los detalles
				del paquete que se está creando.
				Esto genera un archivo llamado:
					package.json

			2º - Se instala el paquete deseado utilizando el comando siguiente:

				npm install nombreDelPaquete

				Ej:
					npm i countries-list
					* Es válido utilizar solo la letra "i", en lugar de "install"

				Esto agrega en el archivo package.json una nueva sección llamada
					"dependencies"
					la cual incluye el nombre del paquete externo del cual depende nuestro paquete.

				Junto con el nombre de la nueva dependencia, aparece la versión actual de la msima
				y a su vez éste número incluye delante el simbolo ^:
					"^2.5.1"
				Este simbolo le dice a NPM que cuando nuestro paquete sea instalado, se descargue
				e instale la dependencia indicada en su versión más actualizada (siempre y cuando
				la misma comienza con el 2). Pero esto puede traer un problema, que es que si al momento
				de instalarse alguien nuestro paquete, el desarrollador de la dependencia lanzó una
				nueva versión que mantiene como primer número el 2, pero que incluye cambios que rompen
				compatibilidad con versiones anteriores, lo que va a pasar es que nuestro paquete no va
				a funcionar.
				Para evitar esto es que entre NODE y NPM se acordó la creación de un nuevo archivo llamado
				"package-lock.json", el cual indica que versión expecífica de cada dependencia se debe
				instalar cuando se instale nuestro paquete, más allá de que en el package.json las mismas
				tengan delante de su número de versión el simbolo ^.

				También crea la carpeta "node_modules"
					Donde se descargarán los archivos de las dependencias instaladas.

		Creación de un script NPM

			En el archivo package.json, en la sección "Scripts", se agrega una nueva entrada
			con nombre "start" y luego de dos puntos se agrega su definición, ej:
				"start": "node index.js"

			Para ejecutar este script debo ejecutar:
				npm start 			//	o npm run start

		Uso del módulo core:	url
			El módulo url posee un método llamado parse() que recibe la propiedad url del objeto request:
				var parsed = url.parse(request.url)
			y devuelve un objeto llamado Url con toda la información de la url recibida:
				Url {
					protocol: null,
					slashes: null,
					auth: null,
					host: null,
					port: null,
					hostname: null,
					hash: null,
					search: '?code=AR',
					query: 'code=AR',
					pathname: '/country',
					path: '/country?code=AR',
					href: '/country?code=AR'
				}

		Uso del módulo core:	querystring
			El módulo querystring posee un método llamado parse que recibe una cadena con el formato
			"clave=valor&clave2=valor2":
				var query = querystring.parse('code=AR')
			y devuelve un objeto que posee propiedades con los nombres de las claves y como valores de
			las mismas los valores	luego de los signos de igual:
				Query: {
					code: 'AR'
				}

	8. Respaldar una app nodejs en un repositorio Git
		-	Inicializar un repositorio Git en la carpeta de nuestro proyecto ejecutando:
				git init
		-	Crear un nuevo repo en Github
		-	Copiarse la url del repo, por ej:
				https://github.com/Jonatandb/CursoUdemyIntroNodeJSExpress.git
		-	Crear en el raiz del proyecto un archivo llamado ".gitignore"
				Este archivo va a tener una entrada por cada carpeta y/o archivo que deseamos
					que Git no tenga en cuenta, para que no lo versione.
				Agregar por ejemplo:
					node_modules/
				** No agregar nunca el archivo package-lock.json!
		-	Desde la consola, parados en el raíz del proyecto, ejecutar:
				git remote add origin https://github.com/Jonatandb/CursoUdemyIntroNodeJSExpress.git
				Con esto vinculamos el repositorio local con el remoto en Github
		-	Crear rama local:
				git checkout -b nombreDeLaRama		(por ej: intro o develop, etc)
		-	Agregar el código y commitearlo:
				git add .
				git commit -m "Commit inicial"
		-	Subir el código a Github:
				git push origin nombreDeLaRama

	9. Instalado express js

		Página de Express JS:	http://expressjs.com/

		Express es un Framework de aplicaciones web Node.js minimalista y flexible que proporciona
		un conjunto robusto de características para aplicaciones web y móviles.

		Con una gran cantidad de métodos de utilidad HTTP y middlewares a su disposición,
		para crear una API robusta rápida y fácilmente.

		Express proporciona una capa delgada de funciones fundamentales de aplicaciones web,
		sin ocultar las funciones de Node.js que conoce y ama.

		Instalación:
			npm install express

		Uso básico:
			var express = require('express')
			const expressWebServer = express()
			const port = 3000
			expressWebServer.get('/', (req, res) => res.send('Funciona!'))
			expressWebServer.listen(port, () => console.log(`Servidor ejecutándose en el puerto ${port}`))
			* Con esto, al ejecutar la aplicación, ya queda corriendo un web server capaz de atender
				solicitudes, al cual se accede desde el navegor yendo a la url: http://localhost:3000
				Al ser una prueba devolverá un error si se intenta acceder a una url diferente de '/'.

		Routing (Ruteo):	http://expressjs.com/en/guide/routing.html
			El enrutamiento se refiere a determinar cómo una aplicación responde a una solicitud del
			cliente a un punto final particular (Endpoint), que es una URI (o ruta) y un método de solicitud
			HTTP específico (GET, POST, etc.).

		Documentación de la API:	http://expressjs.com/en/4x/api.html

		Instalación de Nodemon:

			Paquete NPM que reincia automáticamente la ejecución de nuestro proyecto
			cada vez que detecta que el mismo es modificado.

				Instalación:
					npm install -D nodemon   // Con -D le decimos a NPM que instale el paquete solo como una
											 // dependencia de desarrollo. Una dependencia de desarrollo no
											 // será incluída cuando se haga un paquete productivo ("build")
											 // de la aplicación.
				Uso:
					nodemon index.js

				Agregado de un nuevo script al archivo package.json:
					"dev" : "nodemon index.js"
					* Para el uso del nuevo script ejecutar:
						npm run dev
						*	Npm solo reconoce por defecto los scripts "start" y "test",
							por lo que para ejecutar cualquier otro script hace falta
							agregar el parámetro run:
								npm run dev
								npm run miScript

	10. Configurando Eslint y Prettier

		Al configurar estas herramientas estamos estableciendo que todos los desarroladores involucrados
		en el proyecto deben respetar ciertos estandares de escritura y formato de código y a su vez
		fuerzan a que el código por todos sea similar.

		Instalación como dependencia de desarrollo:
			npm i -D eslint

		Inicialización de Eslint:
			node_modules\.bin\eslint --init
				*	En linux:
								./node_modules/.bin/eslint --init
			Va a preguntar que se desea chequear, elegir la opción más completa:
				"To check syntax, find problems, and enforce code style "
			Va a preguntar que tipo de módulos usa el proyecto, elegir la segunda opción:
				"CommonJS (require/exports)"
			Va a preguntar si usamos algún framework como React, elegir:
				"None of these"
			Va a preguntar si usamos TypeScript, elegir:
				"N"
			Va a preguntar dónde está corriendo nuestro proyecto, elegir:
				"Node"
				* Si estuvieramos trabajando con React, deberíamos elegir "Browser"
			Va a preguntar que estilo de formateo se desea utilizar, elegir:
				"Use a popular style guide"
			Va a preguntar específicamente que estilo deseamos utilizar, elegir:
				"Airbnb: https://github.com/airbnb/javascript"
			Va a preguntar como queremos que obtenga el archivo de configuración, elegir:
				"JSON"
			Va a preguntar si deseamos instalar algunas dependencias necesarias extras, elegir:
				"Y"
			Con esto se van a instalar las dependencias faltantes y se va a crear un archivo .eslintrc.json
			con todo lo configurado.

		Instalación de extensiones extra para VSCode:
			Buscar e instalar:
				Eslint
				Prettier

		Crear un archivo llamado ".prettierrc" y configurarlo a voluntad:
			{
				"tabWidth": 4,
				"useTabs": true,
				"semi": false,
				"singleQuote": true
			}

		Desde VSCode se puede aplicar el formateo presionando:
			Alt + Shift + F
		o F1 y buscando "Aplicar formato de documento con..." y eligiendo Prettier.

	11. Arrow Functions y Firacode

		Eslint marca como error cuando se utilizan funciones en lugar de arrow functions, por lo que es recomendable
		hacer la migración para también ganar legibilidad en el código.
			Para migrar de function a arrow functions:
				-	Se quita la palabra function
				-	Se agregar luego de los paréntesis la flecha: =>
				-	Si la función posee un solo parámetro, el mismo no necesita paréntesis que lo envuelvan:
						text => console.log(text)
				-	La función debe ser asignada a una constante:
						const printText = text => console.log(text)

		A veces Prettier marca como error cosas como por ejemplo que las arrow functions que reciben un solo parámetro
		no tengan el mismo envuelto entre paréntesis. Este aviso se deshabilita agregando al archivo ".eslintrc.json"
		en la sección "rules", lo siguiente:
			"arrow-parens":"off"
		Así como se agrega esta regla según como figura en el popup del alerta de Eslint, se pueden agregar las que se
		deseen.

		Instalación de fuente Firacode

			https://github.com/tonsky/FiraCode

			https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions

		Una vez descargada la fuente, darle doble click para que se instale.
		Una vez instalada ir a VSCode y agregar lo siguiente en este archivo:
			"C:\Users\Jonatandb\AppData\Roaming\Code\User\settings.json"
				"editor.fontFamily": "'Fira Code', Consolas, 'Courier New', monospace",
				"editor.fontLigatures": true,
				// Esto se activa en caso de querer que los simbolos similares se fusionen, por ej ===, =>, etc.

	12. Query Params

		Con express se pueden obtener fácilmente los parámetros pasados por url consultando
		el objeto request.query.

			Por ej, al consultar la url "http://localhost:4000/country?code=AR"
			el valor del la propiedad query del objeto request será este objeto:
				{ code: 'AR' }

		Si en lugar de devolver texto (lo que devuelve por default response.send()), queremos
			devolver por ejemplo contenido json (Content-Type: application/json), debemos
			utilizar el método json() de response:
				response.json( ...objeto json a devolver... )
			** Al verificarlo detecté que send() parece que ahora detecta cuando recibe un objeto
				json y automáticamente devuelve dicho objeto con el Content-Type: application/json





